#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
#frontend main
#    bind *:5000
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js

#    use_backend static          if url_static
#    default_backend             app
frontend ocp4-kubernetes-api-server
    mode tcp
    option tcplog
    bind api.ocp4.gtslabs.ibm.com:6443
    bind api-int.ocp4.gtslabs.ibm.com:6443
    default_backend ocp4-kubernetes-api-server

frontend ocp4-machine-config-server
    mode tcp
    option tcplog
    bind api.ocp4.gtslabs.ibm.com:22623
    bind api-int.ocp4.gtslabs.ibm.com:22623
    default_backend ocp4-machine-config-server

frontend ocp4-router-http
    mode tcp
    option tcplog
    bind apps.ocp4.gtslabs.ibm.com:80
    default_backend ocp4-router-http

frontend ocp4-router-https
    mode tcp
    option tcplog
    bind apps.ocp4.gtslabs.ibm.com:443
    default_backend ocp4-router-https

   
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
#backend app
#    balance     roundrobin
#    server  app1 127.0.0.1:5001 check
#    server  app2 127.0.0.1:5002 check
#    server  app3 127.0.0.1:5003 check
#    server  app4 127.0.0.1:5004 check


backend ocp4-kubernetes-api-server
mode tcp
balance source
server bootstrap-0 bootstrap-0.ocp4.gtslabs.ibm.com:6443 check
server master-0 master-0.ocp4.gtslabs.ibm.com:6443 check
server master-1 master-1.ocp4.gtslabs.ibm.com:6443 check
server master-2 master-2.ocp4.gtslabs.ibm.com:6443 check

backend ocp4-machine-config-server
mode tcp
balance source
server bootstrap-0 bootstrap-0.ocp4.gtslabs.ibm.com:22623 check
server master-0 master-0.ocp4.gtslabs.ibm.com:22623 check
server master-1 master-1.ocp4.gtslabs.ibm.com:22623 check
server master-2 master-2.ocp4.gtslabs.ibm.com:22623 check

backend ocp4-router-http
mode tcp
server infnod-0 infnod-0.ocp4.gtslabs.ibm.com:80 check
server infnod-1 infnod-1.ocp4.gtslabs.ibm.com:80 check

backend ocp4-router-https
mode tcp
server infnod-0 infnod-0.ocp4.gtslabs.ibm.com:443 check
server infnod-1 infnod-1.ocp4.gtslabs.ibm.com:443 check
